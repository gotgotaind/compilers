/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {: 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:} 

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal programc program;
nonterminal Classes class_list;
nonterminal class_c class;
nonterminal Features feature_list;
nonterminal Feature feature;
nonterminal Expression expr,expr_semi,let2,let1;
nonterminal Formals formal_list;
nonterminal Formal formal;

nonterminal Expressions exprs_opt,exprs,expr_semi_list;

/* Precedence declarations go here. */

program	
	::= class_list:cl														    {: RESULT = new programc(curr_lineno(), cl); :}
        ;

class_list
	/* single class */
	::= class:c																    {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	/* several classes */
	| class_list:cl class:c													    {: RESULT = cl.appendElement(c); :}
	;

/* If no parent is specified, the class inherits from the Object class */
class
	::= CLASS TYPEID:n LBRACE feature_list:fl RBRACE SEMI					    {: RESULT = new class_c(curr_lineno(), n, AbstractTable.idtable.addString("Object"), fl, curr_filename()); :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE feature_list:fl RBRACE SEMI	    {: RESULT = new class_c(curr_lineno(), n, p, fl, curr_filename()); :}
	;

/* Feature list may be empty, but no empty features in list. */
feature_list
	::= feature_list:fl feature:f												{: RESULT = fl.appendElement(f); :}
	|	/* empty */																{: RESULT = new Features(curr_lineno()); :}
	;

feature
	::= OBJECTID:o LPAREN formal_list:formal_l RPAREN COLON TYPEID:t LBRACE expr:e RBRACE SEMI {: RESULT = new method(curr_lineno(),o,formal_l,t,e); :}
	|	OBJECTID:o COLON TYPEID:t DARROW expr:e									{: RESULT = new attr(curr_lineno(),o,t,e); :}
	|	OBJECTID:o COLON TYPEID:t												{: RESULT = new attr(curr_lineno(),o,t,new no_expr(curr_lineno())); :}
	;

formal_list
	::= formal:f																{: RESULT = (new Formals(curr_lineno())).appendElement(f); :}
	| formal:f COMMA formal_list:fl 											{: RESULT = fl.appendElement(f); :}
	| 																			{: RESULT = (new Formals(curr_lineno())); :}

	;

formal
	::= OBJECTID:o COLON TYPEID:t												{: RESULT = new formalc(curr_lineno(),o,t); :}
	;

expr
	::= OBJECTID:o DARROW expr:e			{: RESULT = new assign(curr_lineno(),o,e); :}
	| expr:e DOT OBJECTID:o LPAREN exprs_opt:es RPAREN					{: RESULT = new dispatch(curr_lineno(),e,o,es); :}
	| expr:e DOT OBJECTID:o AT TYPEID:t LPAREN exprs_opt:es RPAREN					{: RESULT = new static_dispatch(curr_lineno(),e,t,o,es); :}
	| OBJECTID:o LPAREN exprs_opt:es RPAREN									{: RESULT = new dispatch(curr_lineno(),new object(curr_lineno(),AbstractTable.idtable.addString("self")),o,es); :}
	/* if expr then expr else expr fi */
	| IF expr:e1 THEN expr:e2 ELSE expr:e3 FI 			{: RESULT = new cond(curr_lineno(),e1,e2,e3); :}
	/* while expr loop expr pool */
	| WHILE expr:e1 LOOP expr:e2 POOL 		{: RESULT = new loop(curr_lineno(),e1,e2); :}
	/* { [[expr; ]]+} */
	| LBRACE expr_semi_list:esl RBRACE											{: RESULT = new block(curr_lineno(),esl); :}

	/* let ID : TYPE [ <- expr ] [[, ID : TYPE [ <- expr ]]]* in expr */
	| LET OBJECTID:o COLON TYPEID:t DARROW expr:e1 COMMA let2:e2 	{: RESULT = new let(curr_lineno(),o,t,e1,e2); :}
	/* let ID : TYPE [[, ID : TYPE [ <- expr ]]]* in expr */
	| LET OBJECTID:o COLON TYPEID:t COMMA let2:e2		{: RESULT = new let(curr_lineno(),o,t,new no_expr(curr_lineno()),e2); :}
	/* let ID : TYPE [ <- expr ] in expr */
	|let1:l		{: RESULT = l; :}

	/* case expr of [[ID : TYPE => expr; ]]+esac */		
	| 

	/* new TYPE */
	| NEW TYPEID:t	{: RESULT = new new_(curr_lineno(),t); :}
	| ISVOID expr:e															{: RESULT = new isvoid(curr_lineno(),e); :}
	| LPAREN expr:e RPAREN		{: RESULT = e; :}
	| OBJECTID:o	{: RESULT = new object(curr_lineno(),o); :}
	| INT_CONST:i	{: RESULT = new int_const(curr_lineno(),i); :}
	| STR_CONST:s	{: RESULT = new string_const(curr_lineno(),s); :}
	;

expr_semi_list
	::=
	expr_semi:e							{: RESULT = new Expressions(curr_lineno()).appendElement(e); :}
	| expr_semi_list:esl expr_semi:e   	{: RESULT = esl.appendElement(e); :}
	;

expr_semi
	::=
	expr:e SEMI					{: RESULT = e; :}
	;

exprs_opt
	::=								{: RESULT = new Expressions(curr_lineno()); :}																	
	| exprs:es						{: RESULT = es; :}
	;

exprs
	::= expr:e						{: RESULT = new Expressions(curr_lineno()).appendElement(e); :}	
	| exprs:es COMMA expr:e 			{: RESULT = es.appendElement(e); :}
	;

let2
	::=
	/* ID : TYPE [ <- expr ] [[, ID : TYPE [ <- expr ]]]* in expr */
	| OBJECTID:o COLON TYPEID:t DARROW expr:e1 COMMA let2:e2 	{: RESULT = new let(curr_lineno(),o,t,e1,e2); :}
	/* ID : TYPE [[, ID : TYPE [ <- expr ]]]* in expr */
	| OBJECTID:o COLON TYPEID:t COMMA let2:e2		{: RESULT = new let(curr_lineno(),o,t,new no_expr(curr_lineno()),e2); :}
	/* let ID : TYPE [ <- expr ] in expr */
	| OBJECTID:o COLON TYPEID:t DARROW expr:e1 IN expr:e2		{: RESULT = new let(curr_lineno(),o,t,e1,e2); :}
	/* let ID : TYPE in expr */
	| OBJECTID:o COLON TYPEID:t IN expr:e2		{: RESULT = new let(curr_lineno(),o,t,new no_expr(curr_lineno()),e2); :}
	;

let1
	::=
	/* let ID : TYPE [ <- expr ] in expr */
	| LET OBJECTID:o COLON TYPEID:t DARROW expr:e1 IN expr:e2		{: RESULT = new let(curr_lineno(),o,t,e1,e2); :}
	/* let ID : TYPE in expr */
	| LET OBJECTID:o COLON TYPEID:t IN expr:e2		{: RESULT = new let(curr_lineno(),o,t,new no_expr(curr_lineno()),e2); :}
	;

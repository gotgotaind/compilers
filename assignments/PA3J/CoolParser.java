
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Feb 01 23:41:15 CET 2022
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Feb 01 23:41:15 CET 2022
  */
public class CoolParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CoolParser() {super();}

  /** Constructor which sets the default scanner. */
  public CoolParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CoolParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\044\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\004\010\000\002\004\012" +
    "\000\002\005\004\000\002\005\002\000\002\006\014\000" +
    "\002\006\007\000\002\006\005\000\002\011\003\000\002" +
    "\011\005\000\002\011\002\000\002\012\005\000\002\007" +
    "\005\000\002\007\010\000\002\007\012\000\002\007\006" +
    "\000\002\007\011\000\002\007\007\000\002\007\005\000" +
    "\002\007\010\000\002\007\004\000\002\007\004\000\002" +
    "\007\005\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\015\003\000\002\015\004\000\002\010\004" +
    "\000\002\013\002\000\002\013\003\000\002\014\003\000" +
    "\002\014\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\004\004\007\001\002\000\006\002\001\004" +
    "\007\001\002\000\004\002\136\001\002\000\006\002\uffff" +
    "\004\uffff\001\002\000\004\055\010\001\002\000\006\011" +
    "\012\050\011\001\002\000\006\051\ufffa\056\ufffa\001\002" +
    "\000\004\055\013\001\002\000\004\050\014\001\002\000" +
    "\006\051\ufffa\056\ufffa\001\002\000\006\051\020\056\017" +
    "\001\002\000\006\051\ufffb\056\ufffb\001\002\000\006\044" +
    "\022\045\023\001\002\000\004\043\021\001\002\000\006" +
    "\002\ufffc\004\ufffc\001\002\000\004\055\130\001\002\000" +
    "\006\046\ufff4\056\025\001\002\000\004\046\033\001\002" +
    "\000\004\044\031\001\002\000\006\042\027\046\ufff6\001" +
    "\002\000\006\046\ufff4\056\025\001\002\000\004\046\ufff5" +
    "\001\002\000\004\055\032\001\002\000\006\042\ufff3\046" +
    "\ufff3\001\002\000\004\044\034\001\002\000\004\055\035" +
    "\001\002\000\004\050\036\001\002\000\026\007\044\012" +
    "\050\017\040\024\041\025\045\045\051\050\037\052\043" +
    "\053\042\056\046\001\002\000\026\007\044\012\050\017" +
    "\040\024\041\025\045\045\051\050\037\052\043\053\042" +
    "\056\046\001\002\000\026\007\044\012\050\017\040\024" +
    "\041\025\045\045\051\050\037\052\043\053\042\056\046" +
    "\001\002\000\004\055\115\001\002\000\030\005\uffe6\006" +
    "\uffe6\014\uffe6\015\uffe6\016\uffe6\040\uffe6\042\uffe6\043\uffe6" +
    "\046\uffe6\051\uffe6\056\uffe6\001\002\000\030\005\uffe5\006" +
    "\uffe5\014\uffe5\015\uffe5\016\uffe5\040\uffe5\042\uffe5\043\uffe5" +
    "\046\uffe5\051\uffe5\056\uffe5\001\002\000\026\007\044\012" +
    "\050\017\040\024\041\025\045\045\051\050\037\052\043" +
    "\053\042\056\046\001\002\000\026\007\044\012\050\017" +
    "\040\024\041\025\045\045\051\050\037\052\043\053\042" +
    "\056\046\001\002\000\034\005\uffe7\006\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\023\101\040\uffe7\042\uffe7\043\uffe7\045\102" +
    "\046\uffe7\051\uffe7\056\uffe7\001\002\000\006\040\054\051" +
    "\077\001\002\000\004\056\072\001\002\000\026\007\044" +
    "\012\050\017\040\024\041\025\045\045\051\050\037\052" +
    "\043\053\042\056\046\001\002\000\006\040\054\046\053" +
    "\001\002\000\030\005\uffe8\006\uffe8\014\uffe8\015\uffe8\016" +
    "\uffe8\040\uffe8\042\uffe8\043\uffe8\046\uffe8\051\uffe8\056\uffe8" +
    "\001\002\000\004\056\055\001\002\000\006\045\057\047" +
    "\056\001\002\000\004\055\066\001\002\000\030\007\044" +
    "\012\050\017\040\024\041\025\045\045\051\046\uffe1\050" +
    "\037\052\043\053\042\056\046\001\002\000\004\046\065" +
    "\001\002\000\006\042\063\046\uffe0\001\002\000\010\040" +
    "\054\042\uffdf\046\uffdf\001\002\000\026\007\044\012\050" +
    "\017\040\024\041\025\045\045\051\050\037\052\043\053" +
    "\042\056\046\001\002\000\010\040\054\042\uffde\046\uffde" +
    "\001\002\000\030\005\ufff1\006\ufff1\014\ufff1\015\ufff1\016" +
    "\ufff1\040\ufff1\042\ufff1\043\ufff1\046\ufff1\051\ufff1\056\ufff1" +
    "\001\002\000\004\045\067\001\002\000\030\007\044\012" +
    "\050\017\040\024\041\025\045\045\051\046\uffe1\050\037" +
    "\052\043\053\042\056\046\001\002\000\004\046\071\001" +
    "\002\000\030\005\ufff0\006\ufff0\014\ufff0\015\ufff0\016\ufff0" +
    "\040\ufff0\042\ufff0\043\ufff0\046\ufff0\051\ufff0\056\ufff0\001" +
    "\002\000\004\044\073\001\002\000\004\055\074\001\002" +
    "\000\004\010\075\001\002\000\026\007\044\012\050\017" +
    "\040\024\041\025\045\045\051\050\037\052\043\053\042" +
    "\056\046\001\002\000\030\005\uffeb\006\uffeb\014\uffeb\015" +
    "\uffeb\016\uffeb\040\054\042\uffeb\043\uffeb\046\uffeb\051\uffeb" +
    "\056\uffeb\001\002\000\004\043\100\001\002\000\006\051" +
    "\ufff9\056\ufff9\001\002\000\026\007\044\012\050\017\040" +
    "\024\041\025\045\045\051\050\037\052\043\053\042\056" +
    "\046\001\002\000\030\007\044\012\050\017\040\024\041" +
    "\025\045\045\051\046\uffe1\050\037\052\043\053\042\056" +
    "\046\001\002\000\004\046\104\001\002\000\030\005\uffef" +
    "\006\uffef\014\uffef\015\uffef\016\uffef\040\uffef\042\uffef\043" +
    "\uffef\046\uffef\051\uffef\056\uffef\001\002\000\030\005\ufff2" +
    "\006\ufff2\014\ufff2\015\ufff2\016\ufff2\040\054\042\ufff2\043" +
    "\ufff2\046\ufff2\051\ufff2\056\ufff2\001\002\000\030\005\uffe9" +
    "\006\uffe9\014\uffe9\015\uffe9\016\uffe9\040\054\042\uffe9\043" +
    "\uffe9\046\uffe9\051\uffe9\056\uffe9\001\002\000\006\016\110" +
    "\040\054\001\002\000\026\007\044\012\050\017\040\024" +
    "\041\025\045\045\051\050\037\052\043\053\042\056\046" +
    "\001\002\000\006\005\112\040\054\001\002\000\026\007" +
    "\044\012\050\017\040\024\041\025\045\045\051\050\037" +
    "\052\043\053\042\056\046\001\002\000\006\006\114\040" +
    "\054\001\002\000\030\005\uffee\006\uffee\014\uffee\015\uffee" +
    "\016\uffee\040\uffee\042\uffee\043\uffee\046\uffee\051\uffee\056" +
    "\uffee\001\002\000\030\005\uffea\006\uffea\014\uffea\015\uffea" +
    "\016\uffea\040\uffea\042\uffea\043\uffea\046\uffea\051\uffea\056" +
    "\uffea\001\002\000\006\014\117\040\054\001\002\000\026" +
    "\007\044\012\050\017\040\024\041\025\045\045\051\050" +
    "\037\052\043\053\042\056\046\001\002\000\006\015\121" +
    "\040\054\001\002\000\030\005\uffed\006\uffed\014\uffed\015" +
    "\uffed\016\uffed\040\uffed\042\uffed\043\uffed\046\uffed\051\uffed" +
    "\056\uffed\001\002\000\030\007\uffe4\012\uffe4\017\uffe4\024" +
    "\uffe4\025\uffe4\045\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4" +
    "\056\uffe4\001\002\000\030\007\044\012\050\017\040\024" +
    "\041\025\045\045\051\050\037\051\127\052\043\053\042" +
    "\056\046\001\002\000\006\040\054\043\125\001\002\000" +
    "\030\007\uffe2\012\uffe2\017\uffe2\024\uffe2\025\uffe2\045\uffe2" +
    "\050\uffe2\051\uffe2\052\uffe2\053\uffe2\056\uffe2\001\002\000" +
    "\030\007\uffe3\012\uffe3\017\uffe3\024\uffe3\025\uffe3\045\uffe3" +
    "\050\uffe3\051\uffe3\052\uffe3\053\uffe3\056\uffe3\001\002\000" +
    "\030\005\uffec\006\uffec\014\uffec\015\uffec\016\uffec\040\uffec" +
    "\042\uffec\043\uffec\046\uffec\051\uffec\056\uffec\001\002\000" +
    "\010\023\131\051\ufff7\056\ufff7\001\002\000\026\007\044" +
    "\012\050\017\040\024\041\025\045\045\051\050\037\052" +
    "\043\053\042\056\046\001\002\000\010\040\054\051\ufff8" +
    "\056\ufff8\001\002\000\006\051\134\056\017\001\002\000" +
    "\004\043\135\001\002\000\006\002\ufffd\004\ufffd\001\002" +
    "\000\004\002\000\001\002\000\006\002\ufffe\004\ufffe\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\010\002\004\003\003\004\005\001\001\000" +
    "\004\004\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\014" +
    "\001\001\000\004\006\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\023\012\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\027" +
    "\012\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\046\001\001\000\010\007\123\010" +
    "\121\015\122\001\001\000\004\007\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\106\001\001\000\004\007\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\061\013" +
    "\057\014\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\061" +
    "\013\067\014\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\104\001\001\000\010" +
    "\007\061\013\102\014\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\110\001\001\000\002\001\001\000" +
    "\004\007\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\123\010\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\131\001\001\000\002\001\001\000" +
    "\004\006\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CoolParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CoolParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CoolParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CoolParser$actions {

 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }

  private final CoolParser parser;

  /** Constructor */
  CUP$CoolParser$actions(CoolParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CoolParser$do_action(
    int                        CUP$CoolParser$act_num,
    java_cup.runtime.lr_parser CUP$CoolParser$parser,
    java.util.Stack            CUP$CoolParser$stack,
    int                        CUP$CoolParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CoolParser$result;

      /* select the action based on the action number */
      switch (CUP$CoolParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exprs ::= exprs COMMA expr 
            {
              Expressions RESULT =null;
		Expressions es = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = es.appendElement(e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("exprs",10, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exprs ::= expr 
            {
              Expressions RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new Expressions(curr_lineno()).appendElement(e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("exprs",10, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exprs_opt ::= exprs 
            {
              Expressions RESULT =null;
		Expressions es = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = es; 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("exprs_opt",9, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exprs_opt ::= 
            {
              Expressions RESULT =null;
		 RESULT = new Expressions(curr_lineno()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("exprs_opt",9, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr_semi ::= expr SEMI 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = e; 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr_semi",6, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr_semi_list ::= expr_semi_list expr_semi 
            {
              Expressions RESULT =null;
		Expressions esl = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = esl.appendElement(e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr_semi_list",11, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr_semi_list ::= expr_semi 
            {
              Expressions RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new Expressions(curr_lineno()).appendElement(e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr_semi_list",11, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= STR_CONST 
            {
              Expression RESULT =null;
		AbstractSymbol s = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new string_const(curr_lineno(),s); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= INT_CONST 
            {
              Expression RESULT =null;
		AbstractSymbol i = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new int_const(curr_lineno(),i); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= OBJECTID 
            {
              Expression RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new object(curr_lineno(),o); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= LPAREN expr RPAREN 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = e; 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= ISVOID expr 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new isvoid(curr_lineno(),e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= NEW TYPEID 
            {
              Expression RESULT =null;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new new_(curr_lineno(),t); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= LET OBJECTID COLON TYPEID IN expr 
            {
              Expression RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new let(curr_lineno(),o,t,new no_expr(curr_lineno()),e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= LBRACE expr_semi_list RBRACE 
            {
              Expression RESULT =null;
		Expressions esl = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new block(curr_lineno(),esl); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= WHILE expr LOOP expr POOL 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new loop(curr_lineno(),e1,e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= IF expr THEN expr ELSE expr FI 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e3 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new cond(curr_lineno(),e1,e2,e3); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= OBJECTID LPAREN exprs_opt RPAREN 
            {
              Expression RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expressions es = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new dispatch(curr_lineno(),new object(curr_lineno(),AbstractTable.idtable.addString("self")),o,es); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= expr DOT OBJECTID AT TYPEID LPAREN exprs_opt RPAREN 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)).value;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expressions es = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new static_dispatch(curr_lineno(),e,t,o,es); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr DOT OBJECTID LPAREN exprs_opt RPAREN 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expressions es = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new dispatch(curr_lineno(),e,o,es); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= OBJECTID DARROW expr 
            {
              Expression RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new assign(curr_lineno(),o,e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // formal ::= OBJECTID COLON TYPEID 
            {
              Formal RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new formalc(curr_lineno(),o,t); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("formal",8, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // formal_list ::= 
            {
              Formals RESULT =null;
		 RESULT = (new Formals(curr_lineno())); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("formal_list",7, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // formal_list ::= formal COMMA formal_list 
            {
              Formals RESULT =null;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Formals fl = (Formals)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = fl.appendElement(f); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("formal_list",7, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // formal_list ::= formal 
            {
              Formals RESULT =null;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = (new Formals(curr_lineno())).appendElement(f); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("formal_list",7, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // feature ::= OBJECTID COLON TYPEID 
            {
              Feature RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new attr(curr_lineno(),o,t,new no_expr(curr_lineno())); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("feature",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // feature ::= OBJECTID COLON TYPEID DARROW expr 
            {
              Feature RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new attr(curr_lineno(),o,t,e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("feature",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // feature ::= OBJECTID LPAREN formal_list RPAREN COLON TYPEID LBRACE expr RBRACE SEMI 
            {
              Feature RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-9)).value;
		Formals formal_l = (Formals)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new method(curr_lineno(),o,formal_l,t,e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("feature",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // feature_list ::= 
            {
              Features RESULT =null;
		 RESULT = new Features(curr_lineno()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("feature_list",3, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // feature_list ::= feature_list feature 
            {
              Features RESULT =null;
		Features fl = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		Feature f = (Feature)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = fl.appendElement(f); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("feature_list",3, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // class ::= CLASS TYPEID INHERITS TYPEID LBRACE feature_list RBRACE SEMI 
            {
              class_c RESULT =null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol p = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Features fl = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new class_c(curr_lineno(), n, p, fl, curr_filename()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class",2, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class ::= CLASS TYPEID LBRACE feature_list RBRACE SEMI 
            {
              class_c RESULT =null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Features fl = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new class_c(curr_lineno(), n, AbstractTable.idtable.addString("Object"), fl, curr_filename()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class",2, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_list ::= class_list class 
            {
              Classes RESULT =null;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		class_c c = (class_c)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = cl.appendElement(c); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class_list",1, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // class_list ::= class 
            {
              Classes RESULT =null;
		class_c c = (class_c)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = (new Classes(curr_lineno())).appendElement(c); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class_list",1, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		programc start_val = (programc)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		RESULT = start_val;
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$CoolParser$parser.done_parsing();
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= class_list 
            {
              programc RESULT =null;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new programc(curr_lineno(), cl); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("program",0, RESULT);
            }
          return CUP$CoolParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


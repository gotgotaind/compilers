
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Feb 17 13:55:48 CET 2022
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Feb 17 13:55:48 CET 2022
  */
public class CoolParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CoolParser() {super();}

  /** Constructor which sets the default scanner. */
  public CoolParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CoolParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\004\010\000\002\004\012" +
    "\000\002\004\003\000\002\005\004\000\002\005\002\000" +
    "\002\006\014\000\002\006\010\000\002\006\006\000\002" +
    "\006\004\000\002\013\003\000\002\013\005\000\002\013" +
    "\002\000\002\014\005\000\002\007\005\000\002\007\010" +
    "\000\002\007\012\000\002\007\006\000\002\007\011\000" +
    "\002\007\007\000\002\007\005\000\002\007\012\000\002" +
    "\007\010\000\002\007\006\000\002\007\003\000\002\007" +
    "\007\000\002\007\004\000\002\007\004\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\004\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\004\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\015\010\000\002\015\011\000\002\020\003\000" +
    "\002\020\004\000\002\010\004\000\002\010\004\000\002" +
    "\016\002\000\002\016\003\000\002\017\003\000\002\017" +
    "\005\000\002\011\002\000\002\011\011\000\002\011\007" +
    "\000\002\011\011\000\002\011\007\000\002\012\012\000" +
    "\002\012\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\243\000\006\003\006\004\010\001\002\000\010\002" +
    "\001\003\006\004\010\001\002\000\004\002\244\001\002" +
    "\000\010\002\ufffb\003\ufffb\004\ufffb\001\002\000\010\002" +
    "\uffff\003\uffff\004\uffff\001\002\000\004\055\011\001\002" +
    "\000\006\011\013\050\012\001\002\000\010\003\ufff9\051" +
    "\ufff9\056\ufff9\001\002\000\004\055\014\001\002\000\004" +
    "\050\015\001\002\000\010\003\ufff9\051\ufff9\056\ufff9\001" +
    "\002\000\010\003\017\051\022\056\021\001\002\000\004" +
    "\043\240\001\002\000\010\003\ufffa\051\ufffa\056\ufffa\001" +
    "\002\000\006\044\024\045\025\001\002\000\004\043\023" +
    "\001\002\000\010\002\ufffc\003\ufffc\004\ufffc\001\002\000" +
    "\004\055\233\001\002\000\010\042\ufff2\046\ufff2\056\030" +
    "\001\002\000\006\042\033\046\034\001\002\000\006\042" +
    "\ufff4\046\ufff4\001\002\000\004\044\031\001\002\000\004" +
    "\055\032\001\002\000\006\042\ufff1\046\ufff1\001\002\000" +
    "\004\056\030\001\002\000\004\044\035\001\002\000\004" +
    "\055\036\001\002\000\004\050\037\001\002\000\036\007" +
    "\047\012\056\017\040\020\052\024\043\025\050\027\054" +
    "\041\055\045\057\050\041\052\045\053\042\054\046\056" +
    "\051\001\002\000\036\007\047\012\056\017\040\020\052" +
    "\024\043\025\050\027\054\041\055\045\057\050\041\052" +
    "\045\053\042\054\046\056\051\001\002\000\040\003\217" +
    "\007\047\012\056\017\040\020\052\024\043\025\050\027" +
    "\054\041\055\045\057\050\041\052\045\053\042\054\046" +
    "\056\051\001\002\000\052\005\uffd7\006\uffd7\010\uffd7\014" +
    "\uffd7\015\uffd7\016\uffd7\022\uffd7\030\uffd7\032\uffd7\033\uffd7" +
    "\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\042\uffd7\043" +
    "\uffd7\046\uffd7\047\uffd7\051\uffd7\001\002\000\004\055\215" +
    "\001\002\000\052\005\uffe6\006\uffe6\010\uffe6\014\uffe6\015" +
    "\uffe6\016\uffe6\022\uffe6\030\uffe6\032\uffe6\033\uffe6\034\uffe6" +
    "\035\uffe6\036\uffe6\037\uffe6\040\uffe6\042\uffe6\043\uffe6\046" +
    "\uffe6\047\uffe6\051\uffe6\001\002\000\052\005\uffd6\006\uffd6" +
    "\010\uffd6\014\uffd6\015\uffd6\016\uffd6\022\uffd6\030\uffd6\032" +
    "\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6" +
    "\042\uffd6\043\uffd6\046\uffd6\047\uffd6\051\uffd6\001\002\000" +
    "\052\005\uffd5\006\uffd5\010\uffd5\014\uffd5\015\uffd5\016\uffd5" +
    "\022\uffd5\030\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036" +
    "\uffd5\037\uffd5\040\uffd5\042\uffd5\043\uffd5\046\uffd5\047\uffd5" +
    "\051\uffd5\001\002\000\036\007\047\012\056\017\040\020" +
    "\052\024\043\025\050\027\054\041\055\045\057\050\041" +
    "\052\045\053\042\054\046\056\051\001\002\000\036\007" +
    "\047\012\056\017\040\020\052\024\043\025\050\027\054" +
    "\041\055\045\057\050\041\052\045\053\042\054\046\056" +
    "\051\001\002\000\056\005\uffd8\006\uffd8\010\uffd8\014\uffd8" +
    "\015\uffd8\016\uffd8\022\uffd8\026\202\030\uffd8\032\uffd8\033" +
    "\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\042\uffd8" +
    "\043\uffd8\045\201\046\uffd8\047\uffd8\051\uffd8\001\002\000" +
    "\036\007\047\012\056\017\040\020\052\024\043\025\050" +
    "\027\054\041\055\045\057\050\041\052\045\053\042\054" +
    "\046\056\051\001\002\000\026\030\065\032\064\033\067" +
    "\034\061\035\062\036\063\037\072\040\066\047\071\051" +
    "\157\001\002\000\036\007\047\012\056\017\040\020\052" +
    "\024\043\025\050\027\054\041\055\045\057\050\041\052" +
    "\045\053\042\054\046\056\051\001\002\000\036\007\047" +
    "\012\056\017\040\020\052\024\043\025\050\027\054\041" +
    "\055\045\057\050\041\052\045\053\042\054\046\056\051" +
    "\001\002\000\006\003\120\056\121\001\002\000\036\007" +
    "\047\012\056\017\040\020\052\024\043\025\050\027\054" +
    "\041\055\045\057\050\041\052\045\053\042\054\046\056" +
    "\051\001\002\000\026\030\065\032\064\033\067\034\061" +
    "\035\062\036\063\037\072\040\066\046\070\047\071\001" +
    "\002\000\036\007\047\012\056\017\040\020\052\024\043" +
    "\025\050\027\054\041\055\045\057\050\041\052\045\053" +
    "\042\054\046\056\051\001\002\000\036\007\047\012\056" +
    "\017\040\020\052\024\043\025\050\027\054\041\055\045" +
    "\057\050\041\052\045\053\042\054\046\056\051\001\002" +
    "\000\036\007\047\012\056\017\040\020\052\024\043\025" +
    "\050\027\054\041\055\045\057\050\041\052\045\053\042" +
    "\054\046\056\051\001\002\000\036\007\047\012\056\017" +
    "\040\020\052\024\043\025\050\027\054\041\055\045\057" +
    "\050\041\052\045\053\042\054\046\056\051\001\002\000" +
    "\036\007\047\012\056\017\040\020\052\024\043\025\050" +
    "\027\054\041\055\045\057\050\041\052\045\053\042\054" +
    "\046\056\051\001\002\000\004\056\107\001\002\000\036" +
    "\007\047\012\056\017\040\020\052\024\043\025\050\027" +
    "\054\041\055\045\057\050\041\052\045\053\042\054\046" +
    "\056\051\001\002\000\052\005\uffda\006\uffda\010\uffda\014" +
    "\uffda\015\uffda\016\uffda\022\uffda\030\uffda\032\uffda\033\uffda" +
    "\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda\042\uffda\043" +
    "\uffda\046\uffda\047\uffda\051\uffda\001\002\000\004\055\074" +
    "\001\002\000\036\007\047\012\056\017\040\020\052\024" +
    "\043\025\050\027\054\041\055\045\057\050\041\052\045" +
    "\053\042\054\046\056\051\001\002\000\044\005\uffdd\006" +
    "\uffdd\010\uffdd\014\uffdd\015\uffdd\016\uffdd\022\uffdd\032\064" +
    "\033\067\034\061\035\062\040\066\042\uffdd\043\uffdd\046" +
    "\uffdd\047\071\051\uffdd\001\002\000\004\040\075\001\002" +
    "\000\004\056\076\001\002\000\004\045\077\001\002\000" +
    "\040\007\047\012\056\017\040\020\052\024\043\025\050" +
    "\027\054\041\055\045\057\046\uffce\050\041\052\045\053" +
    "\042\054\046\056\051\001\002\000\030\030\065\032\064" +
    "\033\067\034\061\035\062\036\063\037\072\040\066\042" +
    "\uffcc\046\uffcc\047\071\001\002\000\004\046\105\001\002" +
    "\000\006\042\103\046\uffcd\001\002\000\036\007\047\012" +
    "\056\017\040\020\052\024\043\025\050\027\054\041\055" +
    "\045\057\050\041\052\045\053\042\054\046\056\051\001" +
    "\002\000\030\030\065\032\064\033\067\034\061\035\062" +
    "\036\063\037\072\040\066\042\uffcb\046\uffcb\047\071\001" +
    "\002\000\052\005\uffee\006\uffee\010\uffee\014\uffee\015\uffee" +
    "\016\uffee\022\uffee\030\uffee\032\uffee\033\uffee\034\uffee\035" +
    "\uffee\036\uffee\037\uffee\040\uffee\042\uffee\043\uffee\046\uffee" +
    "\047\uffee\051\uffee\001\002\000\052\005\uffdf\006\uffdf\010" +
    "\uffdf\014\uffdf\015\uffdf\016\uffdf\022\uffdf\030\uffdf\032\uffdf" +
    "\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\066\042" +
    "\uffdf\043\uffdf\046\uffdf\047\071\051\uffdf\001\002\000\004" +
    "\045\110\001\002\000\040\007\047\012\056\017\040\020" +
    "\052\024\043\025\050\027\054\041\055\045\057\046\uffce" +
    "\050\041\052\045\053\042\054\046\056\051\001\002\000" +
    "\004\046\112\001\002\000\052\005\uffef\006\uffef\010\uffef" +
    "\014\uffef\015\uffef\016\uffef\022\uffef\030\uffef\032\uffef\033" +
    "\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef\042\uffef" +
    "\043\uffef\046\uffef\047\uffef\051\uffef\001\002\000\044\005" +
    "\uffdc\006\uffdc\010\uffdc\014\uffdc\015\uffdc\016\uffdc\022\uffdc" +
    "\032\064\033\067\034\061\035\062\040\066\042\uffdc\043" +
    "\uffdc\046\uffdc\047\071\051\uffdc\001\002\000\052\005\uffe2" +
    "\006\uffe2\010\uffe2\014\uffe2\015\uffe2\016\uffe2\022\uffe2\030" +
    "\uffe2\032\uffe2\033\067\034\uffe2\035\062\036\uffe2\037\uffe2" +
    "\040\066\042\uffe2\043\uffe2\046\uffe2\047\071\051\uffe2\001" +
    "\002\000\044\005\uffdb\006\uffdb\010\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\022\uffdb\032\064\033\067\034\061\035\062\040" +
    "\066\042\uffdb\043\uffdb\046\uffdb\047\071\051\uffdb\001\002" +
    "\000\052\005\uffe0\006\uffe0\010\uffe0\014\uffe0\015\uffe0\016" +
    "\uffe0\022\uffe0\030\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0" +
    "\036\uffe0\037\uffe0\040\066\042\uffe0\043\uffe0\046\uffe0\047" +
    "\071\051\uffe0\001\002\000\052\005\uffe1\006\uffe1\010\uffe1" +
    "\014\uffe1\015\uffe1\016\uffe1\022\uffe1\030\uffe1\032\uffe1\033" +
    "\067\034\uffe1\035\062\036\uffe1\037\uffe1\040\066\042\uffe1" +
    "\043\uffe1\046\uffe1\047\071\051\uffe1\001\002\000\004\042" +
    "\153\001\002\000\004\044\122\001\002\000\004\055\123" +
    "\001\002\000\010\010\125\026\126\042\124\001\002\000" +
    "\054\005\uffca\006\uffca\010\uffca\014\uffca\015\uffca\016\uffca" +
    "\022\uffca\030\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036" +
    "\uffca\037\uffca\040\uffca\042\uffca\043\uffca\046\uffca\047\uffca" +
    "\051\uffca\056\133\001\002\000\036\007\047\012\056\017" +
    "\040\020\052\024\043\025\050\027\054\041\055\045\057" +
    "\050\041\052\045\053\042\054\046\056\051\001\002\000" +
    "\036\007\047\012\056\017\040\020\052\024\043\025\050" +
    "\027\054\041\055\045\057\050\041\052\045\053\042\054" +
    "\046\056\051\001\002\000\030\010\130\030\065\032\064" +
    "\033\067\034\061\035\062\036\063\037\072\040\066\042" +
    "\131\047\071\001\002\000\036\007\047\012\056\017\040" +
    "\020\052\024\043\025\050\027\054\041\055\045\057\050" +
    "\041\052\045\053\042\054\046\056\051\001\002\000\054" +
    "\005\uffca\006\uffca\010\uffca\014\uffca\015\uffca\016\uffca\022" +
    "\uffca\030\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca" +
    "\037\uffca\040\uffca\042\uffca\043\uffca\046\uffca\047\uffca\051" +
    "\uffca\056\133\001\002\000\052\005\uffe9\006\uffe9\010\uffe9" +
    "\014\uffe9\015\uffe9\016\uffe9\022\uffe9\030\uffe9\032\uffe9\033" +
    "\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\042\uffe9" +
    "\043\uffe9\046\uffe9\047\uffe9\051\uffe9\001\002\000\004\044" +
    "\134\001\002\000\004\055\135\001\002\000\010\010\137" +
    "\026\140\042\136\001\002\000\054\005\uffca\006\uffca\010" +
    "\uffca\014\uffca\015\uffca\016\uffca\022\uffca\030\uffca\032\uffca" +
    "\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca\042" +
    "\uffca\043\uffca\046\uffca\047\uffca\051\uffca\056\133\001\002" +
    "\000\036\007\047\012\056\017\040\020\052\024\043\025" +
    "\050\027\054\041\055\045\057\050\041\052\045\053\042" +
    "\054\046\056\051\001\002\000\036\007\047\012\056\017" +
    "\040\020\052\024\043\025\050\027\054\041\055\045\057" +
    "\050\041\052\045\053\042\054\046\056\051\001\002\000" +
    "\030\010\142\030\065\032\064\033\067\034\061\035\062" +
    "\036\063\037\072\040\066\042\143\047\071\001\002\000" +
    "\036\007\047\012\056\017\040\020\052\024\043\025\050" +
    "\027\054\041\055\045\057\050\041\052\045\053\042\054" +
    "\046\056\051\001\002\000\054\005\uffca\006\uffca\010\uffca" +
    "\014\uffca\015\uffca\016\uffca\022\uffca\030\uffca\032\uffca\033" +
    "\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca\042\uffca" +
    "\043\uffca\046\uffca\047\uffca\051\uffca\056\133\001\002\000" +
    "\052\005\uffc9\006\uffc9\010\uffc9\014\uffc9\015\uffc9\016\uffc9" +
    "\022\uffc9\030\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036" +
    "\uffc9\037\uffc9\040\uffc9\042\uffc9\043\uffc9\046\uffc9\047\uffc9" +
    "\051\uffc9\001\002\000\052\005\uffc7\006\uffc7\010\uffc7\014" +
    "\uffc7\015\uffc7\016\uffc7\022\uffc7\030\065\032\064\033\067" +
    "\034\061\035\062\036\063\037\072\040\066\042\uffc7\043" +
    "\uffc7\046\uffc7\047\071\051\uffc7\001\002\000\052\005\uffc6" +
    "\006\uffc6\010\uffc6\014\uffc6\015\uffc6\016\uffc6\022\uffc6\030" +
    "\065\032\064\033\067\034\061\035\062\036\063\037\072" +
    "\040\066\042\uffc6\043\uffc6\046\uffc6\047\071\051\uffc6\001" +
    "\002\000\052\005\uffc8\006\uffc8\010\uffc8\014\uffc8\015\uffc8" +
    "\016\uffc8\022\uffc8\030\uffc8\032\uffc8\033\uffc8\034\uffc8\035" +
    "\uffc8\036\uffc8\037\uffc8\040\uffc8\042\uffc8\043\uffc8\046\uffc8" +
    "\047\uffc8\051\uffc8\001\002\000\052\005\uffc5\006\uffc5\010" +
    "\uffc5\014\uffc5\015\uffc5\016\uffc5\022\uffc5\030\065\032\064" +
    "\033\067\034\061\035\062\036\063\037\072\040\066\042" +
    "\uffc5\043\uffc5\046\uffc5\047\071\051\uffc5\001\002\000\052" +
    "\005\uffc4\006\uffc4\010\uffc4\014\uffc4\015\uffc4\016\uffc4\022" +
    "\uffc4\030\065\032\064\033\067\034\061\035\062\036\063" +
    "\037\072\040\066\042\uffc4\043\uffc4\046\uffc4\047\071\051" +
    "\uffc4\001\002\000\052\005\uffe8\006\uffe8\010\uffe8\014\uffe8" +
    "\015\uffe8\016\uffe8\022\uffe8\030\uffe8\032\uffe8\033\uffe8\034" +
    "\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\042\uffe8\043\uffe8" +
    "\046\uffe8\047\uffe8\051\uffe8\001\002\000\054\005\uffca\006" +
    "\uffca\010\uffca\014\uffca\015\uffca\016\uffca\022\uffca\030\uffca" +
    "\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040" +
    "\uffca\042\uffca\043\uffca\046\uffca\047\uffca\051\uffca\056\133" +
    "\001\002\000\052\005\uffe7\006\uffe7\010\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\022\uffe7\030\uffe7\032\uffe7\033\uffe7\034\uffe7" +
    "\035\uffe7\036\uffe7\037\uffe7\040\uffe7\042\uffe7\043\uffe7\046" +
    "\uffe7\047\uffe7\051\uffe7\001\002\000\052\005\uffde\006\uffde" +
    "\010\uffde\014\uffde\015\uffde\016\uffde\022\uffde\030\uffde\032" +
    "\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\066" +
    "\042\uffde\043\uffde\046\uffde\047\071\051\uffde\001\002\000" +
    "\052\005\uffd9\006\uffd9\010\uffd9\014\uffd9\015\uffd9\016\uffd9" +
    "\022\uffd9\030\065\032\064\033\067\034\061\035\062\036" +
    "\063\037\072\040\066\042\uffd9\043\uffd9\046\uffd9\047\071" +
    "\051\uffd9\001\002\000\004\043\160\001\002\000\010\003" +
    "\ufff8\051\ufff8\056\ufff8\001\002\000\026\022\162\030\065" +
    "\032\064\033\067\034\061\035\062\036\063\037\072\040" +
    "\066\047\071\001\002\000\004\056\163\001\002\000\004" +
    "\044\174\001\002\000\006\021\166\056\165\001\002\000" +
    "\004\044\167\001\002\000\052\005\uffe5\006\uffe5\010\uffe5" +
    "\014\uffe5\015\uffe5\016\uffe5\022\uffe5\030\uffe5\032\uffe5\033" +
    "\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\042\uffe5" +
    "\043\uffe5\046\uffe5\047\uffe5\051\uffe5\001\002\000\004\055" +
    "\170\001\002\000\004\023\171\001\002\000\036\007\047" +
    "\012\056\017\040\020\052\024\043\025\050\027\054\041" +
    "\055\045\057\050\041\052\045\053\042\054\046\056\051" +
    "\001\002\000\026\030\065\032\064\033\067\034\061\035" +
    "\062\036\063\037\072\040\066\043\173\047\071\001\002" +
    "\000\006\021\uffd3\056\uffd3\001\002\000\004\055\175\001" +
    "\002\000\004\023\176\001\002\000\036\007\047\012\056" +
    "\017\040\020\052\024\043\025\050\027\054\041\055\045" +
    "\057\050\041\052\045\053\042\054\046\056\051\001\002" +
    "\000\026\030\065\032\064\033\067\034\061\035\062\036" +
    "\063\037\072\040\066\043\200\047\071\001\002\000\006" +
    "\021\uffd4\056\uffd4\001\002\000\040\007\047\012\056\017" +
    "\040\020\052\024\043\025\050\027\054\041\055\045\057" +
    "\046\uffce\050\041\052\045\053\042\054\046\056\051\001" +
    "\002\000\036\007\047\012\056\017\040\020\052\024\043" +
    "\025\050\027\054\041\055\045\057\050\041\052\045\053" +
    "\042\054\046\056\051\001\002\000\052\005\ufff0\006\ufff0" +
    "\010\ufff0\014\ufff0\015\ufff0\016\ufff0\022\ufff0\030\065\032" +
    "\064\033\067\034\061\035\062\036\063\037\072\040\066" +
    "\042\ufff0\043\ufff0\046\ufff0\047\071\051\ufff0\001\002\000" +
    "\004\046\205\001\002\000\052\005\uffed\006\uffed\010\uffed" +
    "\014\uffed\015\uffed\016\uffed\022\uffed\030\uffed\032\uffed\033" +
    "\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed\042\uffed" +
    "\043\uffed\046\uffed\047\uffed\051\uffed\001\002\000\052\005" +
    "\uffe3\006\uffe3\010\uffe3\014\uffe3\015\uffe3\016\uffe3\022\uffe3" +
    "\030\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037" +
    "\uffe3\040\066\042\uffe3\043\uffe3\046\uffe3\047\071\051\uffe3" +
    "\001\002\000\026\016\210\030\065\032\064\033\067\034" +
    "\061\035\062\036\063\037\072\040\066\047\071\001\002" +
    "\000\036\007\047\012\056\017\040\020\052\024\043\025" +
    "\050\027\054\041\055\045\057\050\041\052\045\053\042" +
    "\054\046\056\051\001\002\000\026\005\212\030\065\032" +
    "\064\033\067\034\061\035\062\036\063\037\072\040\066" +
    "\047\071\001\002\000\036\007\047\012\056\017\040\020" +
    "\052\024\043\025\050\027\054\041\055\045\057\050\041" +
    "\052\045\053\042\054\046\056\051\001\002\000\026\006" +
    "\214\030\065\032\064\033\067\034\061\035\062\036\063" +
    "\037\072\040\066\047\071\001\002\000\052\005\uffec\006" +
    "\uffec\010\uffec\014\uffec\015\uffec\016\uffec\022\uffec\030\uffec" +
    "\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040" +
    "\uffec\042\uffec\043\uffec\046\uffec\047\uffec\051\uffec\001\002" +
    "\000\052\005\uffe4\006\uffe4\010\uffe4\014\uffe4\015\uffe4\016" +
    "\uffe4\022\uffe4\030\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4" +
    "\036\uffe4\037\uffe4\040\uffe4\042\uffe4\043\uffe4\046\uffe4\047" +
    "\uffe4\051\uffe4\001\002\000\026\030\065\032\064\033\067" +
    "\034\061\035\062\036\063\037\072\040\066\043\225\047" +
    "\071\001\002\000\004\043\224\001\002\000\042\003\uffd2" +
    "\007\uffd2\012\uffd2\017\uffd2\020\uffd2\024\uffd2\025\uffd2\027" +
    "\uffd2\041\uffd2\045\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2" +
    "\054\uffd2\056\uffd2\001\002\000\042\003\217\007\047\012" +
    "\056\017\040\020\052\024\043\025\050\027\054\041\055" +
    "\045\057\050\041\051\222\052\045\053\042\054\046\056" +
    "\051\001\002\000\052\005\uffea\006\uffea\010\uffea\014\uffea" +
    "\015\uffea\016\uffea\022\uffea\030\uffea\032\uffea\033\uffea\034" +
    "\uffea\035\uffea\036\uffea\037\uffea\040\uffea\042\uffea\043\uffea" +
    "\046\uffea\047\uffea\051\uffea\001\002\000\042\003\uffd1\007" +
    "\uffd1\012\uffd1\017\uffd1\020\uffd1\024\uffd1\025\uffd1\027\uffd1" +
    "\041\uffd1\045\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054" +
    "\uffd1\056\uffd1\001\002\000\042\003\uffcf\007\uffcf\012\uffcf" +
    "\017\uffcf\020\uffcf\024\uffcf\025\uffcf\027\uffcf\041\uffcf\045" +
    "\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\056\uffcf" +
    "\001\002\000\042\003\uffd0\007\uffd0\012\uffd0\017\uffd0\020" +
    "\uffd0\024\uffd0\025\uffd0\027\uffd0\041\uffd0\045\uffd0\050\uffd0" +
    "\051\uffd0\052\uffd0\053\uffd0\054\uffd0\056\uffd0\001\002\000" +
    "\026\014\227\030\065\032\064\033\067\034\061\035\062" +
    "\036\063\037\072\040\066\047\071\001\002\000\036\007" +
    "\047\012\056\017\040\020\052\024\043\025\050\027\054" +
    "\041\055\045\057\050\041\052\045\053\042\054\046\056" +
    "\051\001\002\000\026\015\231\030\065\032\064\033\067" +
    "\034\061\035\062\036\063\037\072\040\066\047\071\001" +
    "\002\000\052\005\uffeb\006\uffeb\010\uffeb\014\uffeb\015\uffeb" +
    "\016\uffeb\022\uffeb\030\uffeb\032\uffeb\033\uffeb\034\uffeb\035" +
    "\uffeb\036\uffeb\037\uffeb\040\uffeb\042\uffeb\043\uffeb\046\uffeb" +
    "\047\uffeb\051\uffeb\001\002\000\006\042\ufff3\046\ufff3\001" +
    "\002\000\006\026\235\043\234\001\002\000\010\003\ufff6" +
    "\051\ufff6\056\ufff6\001\002\000\036\007\047\012\056\017" +
    "\040\020\052\024\043\025\050\027\054\041\055\045\057" +
    "\050\041\052\045\053\042\054\046\056\051\001\002\000" +
    "\026\030\065\032\064\033\067\034\061\035\062\036\063" +
    "\037\072\040\066\043\237\047\071\001\002\000\010\003" +
    "\ufff7\051\ufff7\056\ufff7\001\002\000\010\003\ufff5\051\ufff5" +
    "\056\ufff5\001\002\000\010\003\017\051\242\056\021\001" +
    "\002\000\004\043\243\001\002\000\010\002\ufffd\003\ufffd" +
    "\004\ufffd\001\002\000\004\002\000\001\002\000\010\002" +
    "\ufffe\003\ufffe\004\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\243\000\010\002\004\003\003\004\006\001\001\000" +
    "\004\004\244\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\240\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\015\001\001\000\004\006\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\025\014\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\231\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\052\012\043\001\001\000" +
    "\006\007\225\012\043\001\001\000\012\007\215\010\217" +
    "\012\043\020\220\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\206\012\043\001\001\000\006\007\205\012" +
    "\043\001\001\000\002\001\001\000\006\007\160\012\043" +
    "\001\001\000\002\001\001\000\006\007\155\012\043\001" +
    "\001\000\006\007\154\012\043\001\001\000\002\001\001" +
    "\000\006\007\057\012\043\001\001\000\002\001\001\000" +
    "\006\007\116\012\043\001\001\000\006\007\115\012\043" +
    "\001\001\000\006\007\114\012\043\001\001\000\006\007" +
    "\113\012\043\001\001\000\006\007\112\012\043\001\001" +
    "\000\002\001\001\000\006\007\105\012\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\072\012\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\077\012\043\016\100" +
    "\017\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\103\012\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\077\012\043\016\110\017\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\151\001\001\000\006" +
    "\007\150\012\043\001\001\000\006\007\126\012\043\001" +
    "\001\000\002\001\001\000\006\007\147\012\043\001\001" +
    "\000\004\011\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\146" +
    "\001\001\000\006\007\145\012\043\001\001\000\006\007" +
    "\140\012\043\001\001\000\002\001\001\000\006\007\144" +
    "\012\043\001\001\000\004\011\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\171\012\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\176\012\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\077\012" +
    "\043\016\203\017\101\001\001\000\006\007\202\012\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\210" +
    "\012\043\001\001\000\002\001\001\000\006\007\212\012" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\215\010\222\012\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\227\012\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\235\012\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CoolParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CoolParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CoolParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CoolParser$actions {

 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }

  private final CoolParser parser;

  /** Constructor */
  CUP$CoolParser$actions(CoolParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CoolParser$do_action(
    int                        CUP$CoolParser$act_num,
    java_cup.runtime.lr_parser CUP$CoolParser$parser,
    java.util.Stack            CUP$CoolParser$stack,
    int                        CUP$CoolParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CoolParser$result;

      /* select the action based on the action number */
      switch (CUP$CoolParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // let1 ::= LET OBJECTID COLON TYPEID IN expr 
            {
              Expression RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new let(curr_lineno(),o,t,new no_expr(curr_lineno()),e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("let1",8, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // let1 ::= LET OBJECTID COLON TYPEID ASSIGN expr IN expr 
            {
              Expression RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new let(curr_lineno(),o,t,e1,e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("let1",8, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // let2 ::= OBJECTID COLON TYPEID IN expr 
            {
              Expression RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new let(curr_lineno(),o,t,new no_expr(curr_lineno()),e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("let2",7, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // let2 ::= OBJECTID COLON TYPEID ASSIGN expr IN expr 
            {
              Expression RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new let(curr_lineno(),o,t,e1,e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("let2",7, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // let2 ::= OBJECTID COLON TYPEID COMMA let2 
            {
              Expression RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new let(curr_lineno(),o,t,new no_expr(curr_lineno()),e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("let2",7, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // let2 ::= OBJECTID COLON TYPEID ASSIGN expr COMMA let2 
            {
              Expression RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new let(curr_lineno(),o,t,e1,e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("let2",7, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // let2 ::= 
            {
              Expression RESULT =null;

              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("let2",7, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exprs ::= exprs COMMA expr 
            {
              Expressions RESULT =null;
		Expressions es = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = es.appendElement(e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("exprs",13, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exprs ::= expr 
            {
              Expressions RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new Expressions(curr_lineno()).appendElement(e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("exprs",13, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exprs_opt ::= exprs 
            {
              Expressions RESULT =null;
		Expressions es = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = es; 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("exprs_opt",12, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exprs_opt ::= 
            {
              Expressions RESULT =null;
		 RESULT = new Expressions(curr_lineno()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("exprs_opt",12, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr_semi ::= error SEMI 
            {
              Expression RESULT =null;

              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr_semi",6, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr_semi ::= expr SEMI 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = e; 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr_semi",6, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr_semi_list ::= expr_semi_list expr_semi 
            {
              Expressions RESULT =null;
		Expressions esl = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = esl.appendElement(e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr_semi_list",14, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr_semi_list ::= expr_semi 
            {
              Expressions RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new Expressions(curr_lineno()).appendElement(e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr_semi_list",14, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // id_t_e_semi_list ::= id_t_e_semi_list OBJECTID COLON TYPEID DARROW expr SEMI 
            {
              Cases RESULT =null;
		Cases i = (Cases)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = i.appendElement(new branch(curr_lineno(),o,t,e ) ); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("id_t_e_semi_list",11, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // id_t_e_semi_list ::= OBJECTID COLON TYPEID DARROW expr SEMI 
            {
              Cases RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new Cases(curr_lineno()).appendElement(new branch(curr_lineno(),o,t,e ) ); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("id_t_e_semi_list",11, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= BOOL_CONST 
            {
              Expression RESULT =null;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new bool_const(curr_lineno(),b); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= STR_CONST 
            {
              Expression RESULT =null;
		AbstractSymbol s = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new string_const(curr_lineno(),s); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= INT_CONST 
            {
              Expression RESULT =null;
		AbstractSymbol i = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new int_const(curr_lineno(),i); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= OBJECTID 
            {
              Expression RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new object(curr_lineno(),o); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= NOT expr 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new comp(curr_lineno(),e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= LPAREN expr RPAREN 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = e; 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= expr EQ expr 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new eq(curr_lineno(),e1,e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= expr LE expr 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new leq(curr_lineno(),e1,e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= expr LT expr 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new lt(curr_lineno(),e1,e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= NEG expr 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new neg(curr_lineno(),e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr DIV expr 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new divide(curr_lineno(),e1,e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr MULT expr 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new mul(curr_lineno(),e1,e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr MINUS expr 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new sub(curr_lineno(),e1,e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr PLUS expr 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new plus(curr_lineno(),e1,e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= ISVOID expr 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new isvoid(curr_lineno(),e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= NEW TYPEID 
            {
              Expression RESULT =null;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new new_(curr_lineno(),t); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= CASE expr OF id_t_e_semi_list ESAC 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Cases c = (Cases)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new typcase(curr_lineno(),e,c); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= let1 
            {
              Expression RESULT =null;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = l; 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= LET error COMMA let2 
            {
              Expression RESULT =null;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;

              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= LET OBJECTID COLON TYPEID COMMA let2 
            {
              Expression RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new let(curr_lineno(),o,t,new no_expr(curr_lineno()),e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= LET OBJECTID COLON TYPEID ASSIGN expr COMMA let2 
            {
              Expression RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new let(curr_lineno(),o,t,e1,e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= LBRACE expr_semi_list RBRACE 
            {
              Expression RESULT =null;
		Expressions esl = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new block(curr_lineno(),esl); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= WHILE expr LOOP expr POOL 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new loop(curr_lineno(),e1,e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= IF expr THEN expr ELSE expr FI 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e3 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new cond(curr_lineno(),e1,e2,e3); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= OBJECTID LPAREN exprs_opt RPAREN 
            {
              Expression RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expressions es = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new dispatch(curr_lineno(),new object(curr_lineno(),AbstractTable.idtable.addString("self")),o,es); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= expr AT TYPEID DOT OBJECTID LPAREN exprs_opt RPAREN 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expressions es = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new static_dispatch(curr_lineno(),e,t,o,es); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= expr DOT OBJECTID LPAREN exprs_opt RPAREN 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expressions es = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new dispatch(curr_lineno(),e,o,es); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= OBJECTID ASSIGN expr 
            {
              Expression RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new assign(curr_lineno(),o,e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formal ::= OBJECTID COLON TYPEID 
            {
              Formal RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new formalc(curr_lineno(),o,t); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("formal",10, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // formal_list ::= 
            {
              Formals RESULT =null;
		 RESULT = (new Formals(curr_lineno())); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("formal_list",9, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // formal_list ::= formal_list COMMA formal 
            {
              Formals RESULT =null;
		Formals fl = (Formals)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = fl.appendElement(f); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("formal_list",9, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // formal_list ::= formal 
            {
              Formals RESULT =null;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = (new Formals(curr_lineno())).appendElement(f); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("formal_list",9, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // feature ::= error SEMI 
            {
              Feature RESULT =null;

              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("feature",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // feature ::= OBJECTID COLON TYPEID SEMI 
            {
              Feature RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new attr(curr_lineno(),o,t,new no_expr(curr_lineno())); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("feature",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // feature ::= OBJECTID COLON TYPEID ASSIGN expr SEMI 
            {
              Feature RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new attr(curr_lineno(),o,t,e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("feature",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // feature ::= OBJECTID LPAREN formal_list RPAREN COLON TYPEID LBRACE expr RBRACE SEMI 
            {
              Feature RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-9)).value;
		Formals formal_l = (Formals)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new method(curr_lineno(),o,formal_l,t,e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("feature",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // feature_list ::= 
            {
              Features RESULT =null;
		 RESULT = new Features(curr_lineno()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("feature_list",3, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // feature_list ::= feature_list feature 
            {
              Features RESULT =null;
		Features fl = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		Feature f = (Feature)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = fl.appendElement(f); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("feature_list",3, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // class ::= error 
            {
              class_c RESULT =null;

              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class",2, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // class ::= CLASS TYPEID INHERITS TYPEID LBRACE feature_list RBRACE SEMI 
            {
              class_c RESULT =null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol p = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Features fl = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new class_c(curr_lineno(), n, p, fl, curr_filename()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class",2, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class ::= CLASS TYPEID LBRACE feature_list RBRACE SEMI 
            {
              class_c RESULT =null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Features fl = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new class_c(curr_lineno(), n, AbstractTable.idtable.addString("Object"), fl, curr_filename()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class",2, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_list ::= class_list class 
            {
              Classes RESULT =null;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		class_c c = (class_c)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = cl.appendElement(c); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class_list",1, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // class_list ::= class 
            {
              Classes RESULT =null;
		class_c c = (class_c)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = (new Classes(curr_lineno())).appendElement(c); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class_list",1, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		programc start_val = (programc)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		RESULT = start_val;
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$CoolParser$parser.done_parsing();
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= class_list 
            {
              programc RESULT =null;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new programc(curr_lineno(), cl); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("program",0, RESULT);
            }
          return CUP$CoolParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


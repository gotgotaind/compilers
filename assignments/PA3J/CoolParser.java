
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Feb 03 23:31:44 CET 2022
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Feb 03 23:31:44 CET 2022
  */
public class CoolParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CoolParser() {super();}

  /** Constructor which sets the default scanner. */
  public CoolParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CoolParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\004\010\000\002\004\012" +
    "\000\002\005\004\000\002\005\002\000\002\006\014\000" +
    "\002\006\010\000\002\006\006\000\002\013\003\000\002" +
    "\013\005\000\002\013\002\000\002\014\005\000\002\007" +
    "\005\000\002\007\010\000\002\007\012\000\002\007\006" +
    "\000\002\007\011\000\002\007\007\000\002\007\005\000" +
    "\002\007\012\000\002\007\010\000\002\007\003\000\002" +
    "\007\007\000\002\007\004\000\002\007\004\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\004\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\004\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\015\010\000\002\015\011\000\002\020\003" +
    "\000\002\020\004\000\002\010\004\000\002\016\002\000" +
    "\002\016\003\000\002\017\003\000\002\017\005\000\002" +
    "\011\002\000\002\011\011\000\002\011\007\000\002\011" +
    "\011\000\002\011\007\000\002\012\002\000\002\012\012" +
    "\000\002\012\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\004\004\007\001\002\000\006\002\001\004" +
    "\007\001\002\000\004\002\234\001\002\000\006\002\uffff" +
    "\004\uffff\001\002\000\004\055\010\001\002\000\006\011" +
    "\012\050\011\001\002\000\006\051\ufffa\056\ufffa\001\002" +
    "\000\004\055\013\001\002\000\004\050\014\001\002\000" +
    "\006\051\ufffa\056\ufffa\001\002\000\006\051\020\056\017" +
    "\001\002\000\006\051\ufffb\056\ufffb\001\002\000\006\044" +
    "\022\045\023\001\002\000\004\043\021\001\002\000\006" +
    "\002\ufffc\004\ufffc\001\002\000\004\055\224\001\002\000" +
    "\006\046\ufff4\056\025\001\002\000\004\046\033\001\002" +
    "\000\004\044\031\001\002\000\006\042\027\046\ufff6\001" +
    "\002\000\006\046\ufff4\056\025\001\002\000\004\046\ufff5" +
    "\001\002\000\004\055\032\001\002\000\006\042\ufff3\046" +
    "\ufff3\001\002\000\004\044\034\001\002\000\004\055\035" +
    "\001\002\000\004\050\036\001\002\000\062\007\046\012" +
    "\055\017\037\020\051\024\042\025\047\027\052\030\uffc9" +
    "\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040" +
    "\uffc9\041\054\045\056\047\uffc9\050\040\051\uffc9\052\044" +
    "\053\041\054\045\056\050\001\002\000\062\007\046\012" +
    "\055\014\uffc9\017\037\020\051\024\042\025\047\027\052" +
    "\030\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037" +
    "\uffc9\040\uffc9\041\054\045\056\047\uffc9\050\040\052\044" +
    "\053\041\054\045\056\050\001\002\000\062\007\046\012" +
    "\055\017\037\020\051\024\042\025\047\027\052\030\uffc9" +
    "\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040" +
    "\uffc9\041\054\043\uffc9\045\056\047\uffc9\050\040\052\044" +
    "\053\041\054\045\056\050\001\002\000\052\005\uffda\006" +
    "\uffda\010\uffda\014\uffda\015\uffda\016\uffda\022\uffda\030\uffda" +
    "\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040" +
    "\uffda\042\uffda\043\uffda\046\uffda\047\uffda\051\uffda\001\002" +
    "\000\004\055\211\001\002\000\052\005\uffe9\006\uffe9\010" +
    "\uffe9\014\uffe9\015\uffe9\016\uffe9\022\uffe9\030\uffe9\032\uffe9" +
    "\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\042" +
    "\uffe9\043\uffe9\046\uffe9\047\uffe9\051\uffe9\001\002\000\052" +
    "\005\uffd9\006\uffd9\010\uffd9\014\uffd9\015\uffd9\016\uffd9\022" +
    "\uffd9\030\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9" +
    "\037\uffd9\040\uffd9\042\uffd9\043\uffd9\046\uffd9\047\uffd9\051" +
    "\uffd9\001\002\000\052\005\uffd8\006\uffd8\010\uffd8\014\uffd8" +
    "\015\uffd8\016\uffd8\022\uffd8\030\uffd8\032\uffd8\033\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\042\uffd8\043\uffd8" +
    "\046\uffd8\047\uffd8\051\uffd8\001\002\000\062\007\046\012" +
    "\055\016\uffc9\017\037\020\051\024\042\025\047\027\052" +
    "\030\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037" +
    "\uffc9\040\uffc9\041\054\045\056\047\uffc9\050\040\052\044" +
    "\053\041\054\045\056\050\001\002\000\106\005\uffc9\006" +
    "\uffc9\007\046\010\uffc9\012\055\014\uffc9\015\uffc9\016\uffc9" +
    "\017\037\020\051\022\uffc9\024\042\025\047\027\052\030" +
    "\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9" +
    "\040\uffc9\041\054\042\uffc9\043\uffc9\045\056\046\uffc9\047" +
    "\uffc9\050\040\051\uffc9\052\044\053\041\054\045\056\050" +
    "\001\002\000\056\005\uffdb\006\uffdb\010\uffdb\014\uffdb\015" +
    "\uffdb\016\uffdb\022\uffdb\026\176\030\uffdb\032\uffdb\033\uffdb" +
    "\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\042\uffdb\043" +
    "\uffdb\045\175\046\uffdb\047\uffdb\051\uffdb\001\002\000\062" +
    "\007\046\012\055\017\037\020\051\022\uffc9\024\042\025" +
    "\047\027\052\030\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9" +
    "\036\uffc9\037\uffc9\040\uffc9\041\054\045\056\047\uffc9\050" +
    "\040\052\044\053\041\054\045\056\050\001\002\000\106" +
    "\005\uffc9\006\uffc9\007\046\010\uffc9\012\055\014\uffc9\015" +
    "\uffc9\016\uffc9\017\037\020\051\022\uffc9\024\042\025\047" +
    "\027\052\030\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036" +
    "\uffc9\037\uffc9\040\uffc9\041\054\042\uffc9\043\uffc9\045\056" +
    "\046\uffc9\047\uffc9\050\040\051\uffc9\052\044\053\041\054" +
    "\045\056\050\001\002\000\026\030\064\032\063\033\066" +
    "\034\060\035\061\036\062\037\071\040\065\047\070\051" +
    "\152\001\002\000\106\005\uffc9\006\uffc9\007\046\010\uffc9" +
    "\012\055\014\uffc9\015\uffc9\016\uffc9\017\037\020\051\022" +
    "\uffc9\024\042\025\047\027\052\030\uffc9\032\uffc9\033\uffc9" +
    "\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\054\042" +
    "\uffc9\043\uffc9\045\056\046\uffc9\047\uffc9\050\040\051\uffc9" +
    "\052\044\053\041\054\045\056\050\001\002\000\004\056" +
    "\117\001\002\000\062\007\046\012\055\017\037\020\051" +
    "\024\042\025\047\027\052\030\uffc9\032\uffc9\033\uffc9\034" +
    "\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\054\045\056" +
    "\046\uffc9\047\uffc9\050\040\052\044\053\041\054\045\056" +
    "\050\001\002\000\026\030\064\032\063\033\066\034\060" +
    "\035\061\036\062\037\071\040\065\046\067\047\070\001" +
    "\002\000\106\005\uffc9\006\uffc9\007\046\010\uffc9\012\055" +
    "\014\uffc9\015\uffc9\016\uffc9\017\037\020\051\022\uffc9\024" +
    "\042\025\047\027\052\030\uffc9\032\uffc9\033\uffc9\034\uffc9" +
    "\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\054\042\uffc9\043" +
    "\uffc9\045\056\046\uffc9\047\uffc9\050\040\051\uffc9\052\044" +
    "\053\041\054\045\056\050\001\002\000\106\005\uffc9\006" +
    "\uffc9\007\046\010\uffc9\012\055\014\uffc9\015\uffc9\016\uffc9" +
    "\017\037\020\051\022\uffc9\024\042\025\047\027\052\030" +
    "\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9" +
    "\040\uffc9\041\054\042\uffc9\043\uffc9\045\056\046\uffc9\047" +
    "\uffc9\050\040\051\uffc9\052\044\053\041\054\045\056\050" +
    "\001\002\000\106\005\uffc9\006\uffc9\007\046\010\uffc9\012" +
    "\055\014\uffc9\015\uffc9\016\uffc9\017\037\020\051\022\uffc9" +
    "\024\042\025\047\027\052\030\uffc9\032\uffc9\033\uffc9\034" +
    "\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\054\042\uffc9" +
    "\043\uffc9\045\056\046\uffc9\047\uffc9\050\040\051\uffc9\052" +
    "\044\053\041\054\045\056\050\001\002\000\106\005\uffc9" +
    "\006\uffc9\007\046\010\uffc9\012\055\014\uffc9\015\uffc9\016" +
    "\uffc9\017\037\020\051\022\uffc9\024\042\025\047\027\052" +
    "\030\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037" +
    "\uffc9\040\uffc9\041\054\042\uffc9\043\uffc9\045\056\046\uffc9" +
    "\047\uffc9\050\040\051\uffc9\052\044\053\041\054\045\056" +
    "\050\001\002\000\106\005\uffc9\006\uffc9\007\046\010\uffc9" +
    "\012\055\014\uffc9\015\uffc9\016\uffc9\017\037\020\051\022" +
    "\uffc9\024\042\025\047\027\052\030\uffc9\032\uffc9\033\uffc9" +
    "\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\054\042" +
    "\uffc9\043\uffc9\045\056\046\uffc9\047\uffc9\050\040\051\uffc9" +
    "\052\044\053\041\054\045\056\050\001\002\000\004\056" +
    "\106\001\002\000\106\005\uffc9\006\uffc9\007\046\010\uffc9" +
    "\012\055\014\uffc9\015\uffc9\016\uffc9\017\037\020\051\022" +
    "\uffc9\024\042\025\047\027\052\030\uffc9\032\uffc9\033\uffc9" +
    "\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\054\042" +
    "\uffc9\043\uffc9\045\056\046\uffc9\047\uffc9\050\040\051\uffc9" +
    "\052\044\053\041\054\045\056\050\001\002\000\052\005" +
    "\uffdd\006\uffdd\010\uffdd\014\uffdd\015\uffdd\016\uffdd\022\uffdd" +
    "\030\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037" +
    "\uffdd\040\uffdd\042\uffdd\043\uffdd\046\uffdd\047\uffdd\051\uffdd" +
    "\001\002\000\004\055\073\001\002\000\106\005\uffc9\006" +
    "\uffc9\007\046\010\uffc9\012\055\014\uffc9\015\uffc9\016\uffc9" +
    "\017\037\020\051\022\uffc9\024\042\025\047\027\052\030" +
    "\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9" +
    "\040\uffc9\041\054\042\uffc9\043\uffc9\045\056\046\uffc9\047" +
    "\uffc9\050\040\051\uffc9\052\044\053\041\054\045\056\050" +
    "\001\002\000\052\005\uffe0\006\uffe0\010\uffe0\014\uffe0\015" +
    "\uffe0\016\uffe0\022\uffe0\030\064\032\063\033\066\034\060" +
    "\035\061\036\062\037\071\040\065\042\uffe0\043\uffe0\046" +
    "\uffe0\047\070\051\uffe0\001\002\000\004\040\074\001\002" +
    "\000\004\056\075\001\002\000\004\045\076\001\002\000" +
    "\064\007\046\012\055\017\037\020\051\024\042\025\047" +
    "\027\052\030\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036" +
    "\uffc9\037\uffc9\040\uffc9\041\054\042\uffc9\045\056\046\uffd2" +
    "\047\uffc9\050\040\052\044\053\041\054\045\056\050\001" +
    "\002\000\030\030\064\032\063\033\066\034\060\035\061" +
    "\036\062\037\071\040\065\042\uffd0\046\uffd0\047\070\001" +
    "\002\000\004\046\104\001\002\000\006\042\102\046\uffd1" +
    "\001\002\000\064\007\046\012\055\017\037\020\051\024" +
    "\042\025\047\027\052\030\uffc9\032\uffc9\033\uffc9\034\uffc9" +
    "\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\054\042\uffc9\045" +
    "\056\046\uffc9\047\uffc9\050\040\052\044\053\041\054\045" +
    "\056\050\001\002\000\030\030\064\032\063\033\066\034" +
    "\060\035\061\036\062\037\071\040\065\042\uffcf\046\uffcf" +
    "\047\070\001\002\000\052\005\ufff0\006\ufff0\010\ufff0\014" +
    "\ufff0\015\ufff0\016\ufff0\022\ufff0\030\ufff0\032\ufff0\033\ufff0" +
    "\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\042\ufff0\043" +
    "\ufff0\046\ufff0\047\ufff0\051\ufff0\001\002\000\052\005\uffe2" +
    "\006\uffe2\010\uffe2\014\uffe2\015\uffe2\016\uffe2\022\uffe2\030" +
    "\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2" +
    "\040\uffe2\042\uffe2\043\uffe2\046\uffe2\047\uffe2\051\uffe2\001" +
    "\002\000\004\045\107\001\002\000\064\007\046\012\055" +
    "\017\037\020\051\024\042\025\047\027\052\030\uffc9\032" +
    "\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9" +
    "\041\054\042\uffc9\045\056\046\uffd2\047\uffc9\050\040\052" +
    "\044\053\041\054\045\056\050\001\002\000\004\046\111" +
    "\001\002\000\052\005\ufff1\006\ufff1\010\ufff1\014\ufff1\015" +
    "\ufff1\016\ufff1\022\ufff1\030\ufff1\032\ufff1\033\ufff1\034\ufff1" +
    "\035\ufff1\036\ufff1\037\ufff1\040\ufff1\042\ufff1\043\ufff1\046" +
    "\ufff1\047\ufff1\051\ufff1\001\002\000\052\005\uffdf\006\uffdf" +
    "\010\uffdf\014\uffdf\015\uffdf\016\uffdf\022\uffdf\030\064\032" +
    "\063\033\066\034\060\035\061\036\062\037\071\040\065" +
    "\042\uffdf\043\uffdf\046\uffdf\047\070\051\uffdf\001\002\000" +
    "\052\005\uffe5\006\uffe5\010\uffe5\014\uffe5\015\uffe5\016\uffe5" +
    "\022\uffe5\030\uffe5\032\uffe5\033\066\034\uffe5\035\061\036" +
    "\uffe5\037\uffe5\040\uffe5\042\uffe5\043\uffe5\046\uffe5\047\uffe5" +
    "\051\uffe5\001\002\000\052\005\uffde\006\uffde\010\uffde\014" +
    "\uffde\015\uffde\016\uffde\022\uffde\030\064\032\063\033\066" +
    "\034\060\035\061\036\062\037\071\040\065\042\uffde\043" +
    "\uffde\046\uffde\047\070\051\uffde\001\002\000\052\005\uffe3" +
    "\006\uffe3\010\uffe3\014\uffe3\015\uffe3\016\uffe3\022\uffe3\030" +
    "\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3" +
    "\040\uffe3\042\uffe3\043\uffe3\046\uffe3\047\uffe3\051\uffe3\001" +
    "\002\000\052\005\uffe4\006\uffe4\010\uffe4\014\uffe4\015\uffe4" +
    "\016\uffe4\022\uffe4\030\uffe4\032\uffe4\033\066\034\uffe4\035" +
    "\061\036\uffe4\037\uffe4\040\uffe4\042\uffe4\043\uffe4\046\uffe4" +
    "\047\uffe4\051\uffe4\001\002\000\004\044\120\001\002\000" +
    "\004\055\121\001\002\000\010\010\123\026\124\042\122" +
    "\001\002\000\054\005\uffce\006\uffce\010\uffce\014\uffce\015" +
    "\uffce\016\uffce\022\uffce\030\uffce\032\uffce\033\uffce\034\uffce" +
    "\035\uffce\036\uffce\037\uffce\040\uffce\042\uffce\043\uffce\046" +
    "\uffce\047\uffce\051\uffce\056\131\001\002\000\106\005\uffc9" +
    "\006\uffc9\007\046\010\uffc9\012\055\014\uffc9\015\uffc9\016" +
    "\uffc9\017\037\020\051\022\uffc9\024\042\025\047\027\052" +
    "\030\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037" +
    "\uffc9\040\uffc9\041\054\042\uffc9\043\uffc9\045\056\046\uffc9" +
    "\047\uffc9\050\040\051\uffc9\052\044\053\041\054\045\056" +
    "\050\001\002\000\064\007\046\010\uffc9\012\055\017\037" +
    "\020\051\024\042\025\047\027\052\030\uffc9\032\uffc9\033" +
    "\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\054" +
    "\042\uffc9\045\056\047\uffc9\050\040\052\044\053\041\054" +
    "\045\056\050\001\002\000\030\010\126\030\064\032\063" +
    "\033\066\034\060\035\061\036\062\037\071\040\065\042" +
    "\127\047\070\001\002\000\106\005\uffc9\006\uffc9\007\046" +
    "\010\uffc9\012\055\014\uffc9\015\uffc9\016\uffc9\017\037\020" +
    "\051\022\uffc9\024\042\025\047\027\052\030\uffc9\032\uffc9" +
    "\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041" +
    "\054\042\uffc9\043\uffc9\045\056\046\uffc9\047\uffc9\050\040" +
    "\051\uffc9\052\044\053\041\054\045\056\050\001\002\000" +
    "\054\005\uffce\006\uffce\010\uffce\014\uffce\015\uffce\016\uffce" +
    "\022\uffce\030\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036" +
    "\uffce\037\uffce\040\uffce\042\uffce\043\uffce\046\uffce\047\uffce" +
    "\051\uffce\056\131\001\002\000\052\005\uffeb\006\uffeb\010" +
    "\uffeb\014\uffeb\015\uffeb\016\uffeb\022\uffeb\030\uffeb\032\uffeb" +
    "\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\042" +
    "\uffeb\043\uffeb\046\uffeb\047\uffeb\051\uffeb\001\002\000\004" +
    "\044\132\001\002\000\004\055\133\001\002\000\010\010" +
    "\135\026\136\042\134\001\002\000\054\005\uffce\006\uffce" +
    "\010\uffce\014\uffce\015\uffce\016\uffce\022\uffce\030\uffce\032" +
    "\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce" +
    "\042\uffce\043\uffce\046\uffce\047\uffce\051\uffce\056\131\001" +
    "\002\000\106\005\uffc9\006\uffc9\007\046\010\uffc9\012\055" +
    "\014\uffc9\015\uffc9\016\uffc9\017\037\020\051\022\uffc9\024" +
    "\042\025\047\027\052\030\uffc9\032\uffc9\033\uffc9\034\uffc9" +
    "\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\054\042\uffc9\043" +
    "\uffc9\045\056\046\uffc9\047\uffc9\050\040\051\uffc9\052\044" +
    "\053\041\054\045\056\050\001\002\000\064\007\046\010" +
    "\uffc9\012\055\017\037\020\051\024\042\025\047\027\052" +
    "\030\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037" +
    "\uffc9\040\uffc9\041\054\042\uffc9\045\056\047\uffc9\050\040" +
    "\052\044\053\041\054\045\056\050\001\002\000\030\010" +
    "\140\030\064\032\063\033\066\034\060\035\061\036\062" +
    "\037\071\040\065\042\141\047\070\001\002\000\106\005" +
    "\uffc9\006\uffc9\007\046\010\uffc9\012\055\014\uffc9\015\uffc9" +
    "\016\uffc9\017\037\020\051\022\uffc9\024\042\025\047\027" +
    "\052\030\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9" +
    "\037\uffc9\040\uffc9\041\054\042\uffc9\043\uffc9\045\056\046" +
    "\uffc9\047\uffc9\050\040\051\uffc9\052\044\053\041\054\045" +
    "\056\050\001\002\000\054\005\uffce\006\uffce\010\uffce\014" +
    "\uffce\015\uffce\016\uffce\022\uffce\030\uffce\032\uffce\033\uffce" +
    "\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\042\uffce\043" +
    "\uffce\046\uffce\047\uffce\051\uffce\056\131\001\002\000\052" +
    "\005\uffcd\006\uffcd\010\uffcd\014\uffcd\015\uffcd\016\uffcd\022" +
    "\uffcd\030\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd" +
    "\037\uffcd\040\uffcd\042\uffcd\043\uffcd\046\uffcd\047\uffcd\051" +
    "\uffcd\001\002\000\052\005\uffcb\006\uffcb\010\uffcb\014\uffcb" +
    "\015\uffcb\016\uffcb\022\uffcb\030\064\032\063\033\066\034" +
    "\060\035\061\036\062\037\071\040\065\042\uffcb\043\uffcb" +
    "\046\uffcb\047\070\051\uffcb\001\002\000\052\005\uffca\006" +
    "\uffca\010\uffca\014\uffca\015\uffca\016\uffca\022\uffca\030\064" +
    "\032\063\033\066\034\060\035\061\036\062\037\071\040" +
    "\065\042\uffca\043\uffca\046\uffca\047\070\051\uffca\001\002" +
    "\000\052\005\uffcc\006\uffcc\010\uffcc\014\uffcc\015\uffcc\016" +
    "\uffcc\022\uffcc\030\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc" +
    "\036\uffcc\037\uffcc\040\uffcc\042\uffcc\043\uffcc\046\uffcc\047" +
    "\uffcc\051\uffcc\001\002\000\052\005\uffc8\006\uffc8\010\uffc8" +
    "\014\uffc8\015\uffc8\016\uffc8\022\uffc8\030\064\032\063\033" +
    "\066\034\060\035\061\036\062\037\071\040\065\042\uffc8" +
    "\043\uffc8\046\uffc8\047\070\051\uffc8\001\002\000\052\005" +
    "\uffc7\006\uffc7\010\uffc7\014\uffc7\015\uffc7\016\uffc7\022\uffc7" +
    "\030\064\032\063\033\066\034\060\035\061\036\062\037" +
    "\071\040\065\042\uffc7\043\uffc7\046\uffc7\047\070\051\uffc7" +
    "\001\002\000\052\005\uffea\006\uffea\010\uffea\014\uffea\015" +
    "\uffea\016\uffea\022\uffea\030\uffea\032\uffea\033\uffea\034\uffea" +
    "\035\uffea\036\uffea\037\uffea\040\uffea\042\uffea\043\uffea\046" +
    "\uffea\047\uffea\051\uffea\001\002\000\052\005\uffe1\006\uffe1" +
    "\010\uffe1\014\uffe1\015\uffe1\016\uffe1\022\uffe1\030\064\032" +
    "\063\033\066\034\060\035\061\036\062\037\071\040\065" +
    "\042\uffe1\043\uffe1\046\uffe1\047\070\051\uffe1\001\002\000" +
    "\004\043\153\001\002\000\006\051\ufff9\056\ufff9\001\002" +
    "\000\052\005\uffdc\006\uffdc\010\uffdc\014\uffdc\015\uffdc\016" +
    "\uffdc\022\uffdc\030\064\032\063\033\066\034\060\035\061" +
    "\036\062\037\071\040\065\042\uffdc\043\uffdc\046\uffdc\047" +
    "\070\051\uffdc\001\002\000\026\022\156\030\064\032\063" +
    "\033\066\034\060\035\061\036\062\037\071\040\065\047" +
    "\070\001\002\000\004\056\157\001\002\000\004\044\170" +
    "\001\002\000\006\021\162\056\161\001\002\000\004\044" +
    "\163\001\002\000\052\005\uffe8\006\uffe8\010\uffe8\014\uffe8" +
    "\015\uffe8\016\uffe8\022\uffe8\030\uffe8\032\uffe8\033\uffe8\034" +
    "\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\042\uffe8\043\uffe8" +
    "\046\uffe8\047\uffe8\051\uffe8\001\002\000\004\055\164\001" +
    "\002\000\004\023\165\001\002\000\062\007\046\012\055" +
    "\017\037\020\051\024\042\025\047\027\052\030\uffc9\032" +
    "\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9" +
    "\041\054\043\uffc9\045\056\047\uffc9\050\040\052\044\053" +
    "\041\054\045\056\050\001\002\000\026\030\064\032\063" +
    "\033\066\034\060\035\061\036\062\037\071\040\065\043" +
    "\167\047\070\001\002\000\006\021\uffd6\056\uffd6\001\002" +
    "\000\004\055\171\001\002\000\004\023\172\001\002\000" +
    "\062\007\046\012\055\017\037\020\051\024\042\025\047" +
    "\027\052\030\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036" +
    "\uffc9\037\uffc9\040\uffc9\041\054\043\uffc9\045\056\047\uffc9" +
    "\050\040\052\044\053\041\054\045\056\050\001\002\000" +
    "\026\030\064\032\063\033\066\034\060\035\061\036\062" +
    "\037\071\040\065\043\174\047\070\001\002\000\006\021" +
    "\uffd7\056\uffd7\001\002\000\064\007\046\012\055\017\037" +
    "\020\051\024\042\025\047\027\052\030\uffc9\032\uffc9\033" +
    "\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\054" +
    "\042\uffc9\045\056\046\uffd2\047\uffc9\050\040\052\044\053" +
    "\041\054\045\056\050\001\002\000\106\005\uffc9\006\uffc9" +
    "\007\046\010\uffc9\012\055\014\uffc9\015\uffc9\016\uffc9\017" +
    "\037\020\051\022\uffc9\024\042\025\047\027\052\030\uffc9" +
    "\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040" +
    "\uffc9\041\054\042\uffc9\043\uffc9\045\056\046\uffc9\047\uffc9" +
    "\050\040\051\uffc9\052\044\053\041\054\045\056\050\001" +
    "\002\000\052\005\ufff2\006\ufff2\010\ufff2\014\ufff2\015\ufff2" +
    "\016\ufff2\022\ufff2\030\064\032\063\033\066\034\060\035" +
    "\061\036\062\037\071\040\065\042\ufff2\043\ufff2\046\ufff2" +
    "\047\070\051\ufff2\001\002\000\004\046\201\001\002\000" +
    "\052\005\uffef\006\uffef\010\uffef\014\uffef\015\uffef\016\uffef" +
    "\022\uffef\030\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036" +
    "\uffef\037\uffef\040\uffef\042\uffef\043\uffef\046\uffef\047\uffef" +
    "\051\uffef\001\002\000\052\005\uffe6\006\uffe6\010\uffe6\014" +
    "\uffe6\015\uffe6\016\uffe6\022\uffe6\030\064\032\063\033\066" +
    "\034\060\035\061\036\062\037\071\040\065\042\uffe6\043" +
    "\uffe6\046\uffe6\047\070\051\uffe6\001\002\000\026\016\204" +
    "\030\064\032\063\033\066\034\060\035\061\036\062\037" +
    "\071\040\065\047\070\001\002\000\062\005\uffc9\007\046" +
    "\012\055\017\037\020\051\024\042\025\047\027\052\030" +
    "\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9" +
    "\040\uffc9\041\054\045\056\047\uffc9\050\040\052\044\053" +
    "\041\054\045\056\050\001\002\000\026\005\206\030\064" +
    "\032\063\033\066\034\060\035\061\036\062\037\071\040" +
    "\065\047\070\001\002\000\062\006\uffc9\007\046\012\055" +
    "\017\037\020\051\024\042\025\047\027\052\030\uffc9\032" +
    "\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9" +
    "\041\054\045\056\047\uffc9\050\040\052\044\053\041\054" +
    "\045\056\050\001\002\000\026\006\210\030\064\032\063" +
    "\033\066\034\060\035\061\036\062\037\071\040\065\047" +
    "\070\001\002\000\052\005\uffee\006\uffee\010\uffee\014\uffee" +
    "\015\uffee\016\uffee\022\uffee\030\uffee\032\uffee\033\uffee\034" +
    "\uffee\035\uffee\036\uffee\037\uffee\040\uffee\042\uffee\043\uffee" +
    "\046\uffee\047\uffee\051\uffee\001\002\000\052\005\uffe7\006" +
    "\uffe7\010\uffe7\014\uffe7\015\uffe7\016\uffe7\022\uffe7\030\uffe7" +
    "\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040" +
    "\uffe7\042\uffe7\043\uffe7\046\uffe7\047\uffe7\051\uffe7\001\002" +
    "\000\026\030\064\032\063\033\066\034\060\035\061\036" +
    "\062\037\071\040\065\043\217\047\070\001\002\000\064" +
    "\007\uffd5\012\uffd5\017\uffd5\020\uffd5\024\uffd5\025\uffd5\027" +
    "\uffd5\030\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5" +
    "\037\uffd5\040\uffd5\041\uffd5\043\uffd5\045\uffd5\047\uffd5\050" +
    "\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\056\uffd5\001\002" +
    "\000\064\007\046\012\055\017\037\020\051\024\042\025" +
    "\047\027\052\030\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9" +
    "\036\uffc9\037\uffc9\040\uffc9\041\054\043\uffc9\045\056\047" +
    "\uffc9\050\040\051\215\052\044\053\041\054\045\056\050" +
    "\001\002\000\052\005\uffec\006\uffec\010\uffec\014\uffec\015" +
    "\uffec\016\uffec\022\uffec\030\uffec\032\uffec\033\uffec\034\uffec" +
    "\035\uffec\036\uffec\037\uffec\040\uffec\042\uffec\043\uffec\046" +
    "\uffec\047\uffec\051\uffec\001\002\000\064\007\uffd4\012\uffd4" +
    "\017\uffd4\020\uffd4\024\uffd4\025\uffd4\027\uffd4\030\uffd4\032" +
    "\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4" +
    "\041\uffd4\043\uffd4\045\uffd4\047\uffd4\050\uffd4\051\uffd4\052" +
    "\uffd4\053\uffd4\054\uffd4\056\uffd4\001\002\000\064\007\uffd3" +
    "\012\uffd3\017\uffd3\020\uffd3\024\uffd3\025\uffd3\027\uffd3\030" +
    "\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3" +
    "\040\uffd3\041\uffd3\043\uffd3\045\uffd3\047\uffd3\050\uffd3\051" +
    "\uffd3\052\uffd3\053\uffd3\054\uffd3\056\uffd3\001\002\000\026" +
    "\014\221\030\064\032\063\033\066\034\060\035\061\036" +
    "\062\037\071\040\065\047\070\001\002\000\062\007\046" +
    "\012\055\015\uffc9\017\037\020\051\024\042\025\047\027" +
    "\052\030\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9" +
    "\037\uffc9\040\uffc9\041\054\045\056\047\uffc9\050\040\052" +
    "\044\053\041\054\045\056\050\001\002\000\026\015\223" +
    "\030\064\032\063\033\066\034\060\035\061\036\062\037" +
    "\071\040\065\047\070\001\002\000\052\005\uffed\006\uffed" +
    "\010\uffed\014\uffed\015\uffed\016\uffed\022\uffed\030\uffed\032" +
    "\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed" +
    "\042\uffed\043\uffed\046\uffed\047\uffed\051\uffed\001\002\000" +
    "\006\026\226\043\225\001\002\000\006\051\ufff7\056\ufff7" +
    "\001\002\000\062\007\046\012\055\017\037\020\051\024" +
    "\042\025\047\027\052\030\uffc9\032\uffc9\033\uffc9\034\uffc9" +
    "\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\054\043\uffc9\045" +
    "\056\047\uffc9\050\040\052\044\053\041\054\045\056\050" +
    "\001\002\000\026\030\064\032\063\033\066\034\060\035" +
    "\061\036\062\037\071\040\065\043\230\047\070\001\002" +
    "\000\006\051\ufff8\056\ufff8\001\002\000\006\051\232\056" +
    "\017\001\002\000\004\043\233\001\002\000\006\002\ufffd" +
    "\004\ufffd\001\002\000\004\002\000\001\002\000\006\002" +
    "\ufffe\004\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\010\002\004\003\003\004\005\001\001\000" +
    "\004\004\234\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\230\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\014" +
    "\001\001\000\004\006\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\023\014\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\027" +
    "\014\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\052\012\042\001\001\000\006\007" +
    "\217\012\042\001\001\000\012\007\211\010\212\012\042" +
    "\020\213\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\202\012\042\001\001\000\006\007\201\012\042\001" +
    "\001\000\002\001\001\000\006\007\154\012\042\001\001" +
    "\000\006\007\153\012\042\001\001\000\002\001\001\000" +
    "\006\007\150\012\042\001\001\000\002\001\001\000\006" +
    "\007\056\012\042\001\001\000\002\001\001\000\006\007" +
    "\115\012\042\001\001\000\006\007\114\012\042\001\001" +
    "\000\006\007\113\012\042\001\001\000\006\007\112\012" +
    "\042\001\001\000\006\007\111\012\042\001\001\000\002" +
    "\001\001\000\006\007\104\012\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\071\012\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\007\076\012\042\016\077\017\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\102\012\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\076\012\042\016\107\017\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\147\001\001\000\006\007\146\012\042\001\001" +
    "\000\006\007\124\012\042\001\001\000\002\001\001\000" +
    "\006\007\145\012\042\001\001\000\004\011\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\144\001\001\000\006\007\143" +
    "\012\042\001\001\000\006\007\136\012\042\001\001\000" +
    "\002\001\001\000\006\007\142\012\042\001\001\000\004" +
    "\011\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\157\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\165\012\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\172\012\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\076\012\042\016\177" +
    "\017\100\001\001\000\006\007\176\012\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\204\012\042\001" +
    "\001\000\002\001\001\000\006\007\206\012\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\211\010\215" +
    "\012\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\221\012\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\226\012\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CoolParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CoolParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CoolParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CoolParser$actions {

 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }

  private final CoolParser parser;

  /** Constructor */
  CUP$CoolParser$actions(CoolParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CoolParser$do_action(
    int                        CUP$CoolParser$act_num,
    java_cup.runtime.lr_parser CUP$CoolParser$parser,
    java.util.Stack            CUP$CoolParser$stack,
    int                        CUP$CoolParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CoolParser$result;

      /* select the action based on the action number */
      switch (CUP$CoolParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // let1 ::= LET OBJECTID COLON TYPEID IN expr 
            {
              Expression RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new let(curr_lineno(),o,t,new no_expr(curr_lineno()),e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("let1",8, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // let1 ::= LET OBJECTID COLON TYPEID ASSIGN expr IN expr 
            {
              Expression RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new let(curr_lineno(),o,t,e1,e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("let1",8, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // let1 ::= 
            {
              Expression RESULT =null;

              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("let1",8, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // let2 ::= OBJECTID COLON TYPEID IN expr 
            {
              Expression RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new let(curr_lineno(),o,t,new no_expr(curr_lineno()),e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("let2",7, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // let2 ::= OBJECTID COLON TYPEID ASSIGN expr IN expr 
            {
              Expression RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new let(curr_lineno(),o,t,e1,e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("let2",7, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // let2 ::= OBJECTID COLON TYPEID COMMA let2 
            {
              Expression RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new let(curr_lineno(),o,t,new no_expr(curr_lineno()),e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("let2",7, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // let2 ::= OBJECTID COLON TYPEID ASSIGN expr COMMA let2 
            {
              Expression RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new let(curr_lineno(),o,t,e1,e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("let2",7, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // let2 ::= 
            {
              Expression RESULT =null;

              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("let2",7, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exprs ::= exprs COMMA expr 
            {
              Expressions RESULT =null;
		Expressions es = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = es.appendElement(e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("exprs",13, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exprs ::= expr 
            {
              Expressions RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new Expressions(curr_lineno()).appendElement(e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("exprs",13, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exprs_opt ::= exprs 
            {
              Expressions RESULT =null;
		Expressions es = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = es; 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("exprs_opt",12, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exprs_opt ::= 
            {
              Expressions RESULT =null;
		 RESULT = new Expressions(curr_lineno()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("exprs_opt",12, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr_semi ::= expr SEMI 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = e; 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr_semi",6, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr_semi_list ::= expr_semi_list expr_semi 
            {
              Expressions RESULT =null;
		Expressions esl = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = esl.appendElement(e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr_semi_list",14, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr_semi_list ::= expr_semi 
            {
              Expressions RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new Expressions(curr_lineno()).appendElement(e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr_semi_list",14, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // id_t_e_semi_list ::= id_t_e_semi_list OBJECTID COLON TYPEID DARROW expr SEMI 
            {
              Cases RESULT =null;
		Cases i = (Cases)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = i.appendElement(new branch(curr_lineno(),o,t,e ) ); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("id_t_e_semi_list",11, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // id_t_e_semi_list ::= OBJECTID COLON TYPEID DARROW expr SEMI 
            {
              Cases RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new Cases(curr_lineno()).appendElement(new branch(curr_lineno(),o,t,e ) ); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("id_t_e_semi_list",11, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= BOOL_CONST 
            {
              Expression RESULT =null;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new bool_const(curr_lineno(),b); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= STR_CONST 
            {
              Expression RESULT =null;
		AbstractSymbol s = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new string_const(curr_lineno(),s); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= INT_CONST 
            {
              Expression RESULT =null;
		AbstractSymbol i = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new int_const(curr_lineno(),i); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= OBJECTID 
            {
              Expression RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new object(curr_lineno(),o); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= NOT expr 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new comp(curr_lineno(),e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= LPAREN expr RPAREN 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = e; 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= expr EQ expr 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new eq(curr_lineno(),e1,e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr LE expr 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new leq(curr_lineno(),e1,e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr LT expr 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new lt(curr_lineno(),e1,e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= NEG expr 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new neg(curr_lineno(),e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr DIV expr 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new divide(curr_lineno(),e1,e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= expr MULT expr 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new mul(curr_lineno(),e1,e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr MINUS expr 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new sub(curr_lineno(),e1,e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr PLUS expr 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new plus(curr_lineno(),e1,e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= ISVOID expr 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new isvoid(curr_lineno(),e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= NEW TYPEID 
            {
              Expression RESULT =null;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new new_(curr_lineno(),t); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= CASE expr OF id_t_e_semi_list ESAC 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Cases c = (Cases)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new typcase(curr_lineno(),e,c); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= let1 
            {
              Expression RESULT =null;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = l; 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= LET OBJECTID COLON TYPEID COMMA let2 
            {
              Expression RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new let(curr_lineno(),o,t,new no_expr(curr_lineno()),e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= LET OBJECTID COLON TYPEID ASSIGN expr COMMA let2 
            {
              Expression RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new let(curr_lineno(),o,t,e1,e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= LBRACE expr_semi_list RBRACE 
            {
              Expression RESULT =null;
		Expressions esl = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new block(curr_lineno(),esl); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= WHILE expr LOOP expr POOL 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new loop(curr_lineno(),e1,e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= IF expr THEN expr ELSE expr FI 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e3 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new cond(curr_lineno(),e1,e2,e3); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= OBJECTID LPAREN exprs_opt RPAREN 
            {
              Expression RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expressions es = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new dispatch(curr_lineno(),new object(curr_lineno(),AbstractTable.idtable.addString("self")),o,es); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= expr AT TYPEID DOT OBJECTID LPAREN exprs_opt RPAREN 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expressions es = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new static_dispatch(curr_lineno(),e,t,o,es); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr DOT OBJECTID LPAREN exprs_opt RPAREN 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expressions es = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new dispatch(curr_lineno(),e,o,es); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= OBJECTID ASSIGN expr 
            {
              Expression RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new assign(curr_lineno(),o,e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // formal ::= OBJECTID COLON TYPEID 
            {
              Formal RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new formalc(curr_lineno(),o,t); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("formal",10, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // formal_list ::= 
            {
              Formals RESULT =null;
		 RESULT = (new Formals(curr_lineno())); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("formal_list",9, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // formal_list ::= formal COMMA formal_list 
            {
              Formals RESULT =null;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Formals fl = (Formals)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = fl.appendElement(f); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("formal_list",9, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // formal_list ::= formal 
            {
              Formals RESULT =null;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = (new Formals(curr_lineno())).appendElement(f); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("formal_list",9, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // feature ::= OBJECTID COLON TYPEID SEMI 
            {
              Feature RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new attr(curr_lineno(),o,t,new no_expr(curr_lineno())); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("feature",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // feature ::= OBJECTID COLON TYPEID ASSIGN expr SEMI 
            {
              Feature RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new attr(curr_lineno(),o,t,e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("feature",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // feature ::= OBJECTID LPAREN formal_list RPAREN COLON TYPEID LBRACE expr RBRACE SEMI 
            {
              Feature RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-9)).value;
		Formals formal_l = (Formals)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new method(curr_lineno(),o,formal_l,t,e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("feature",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // feature_list ::= 
            {
              Features RESULT =null;
		 RESULT = new Features(curr_lineno()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("feature_list",3, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // feature_list ::= feature_list feature 
            {
              Features RESULT =null;
		Features fl = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		Feature f = (Feature)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = fl.appendElement(f); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("feature_list",3, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // class ::= CLASS TYPEID INHERITS TYPEID LBRACE feature_list RBRACE SEMI 
            {
              class_c RESULT =null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol p = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Features fl = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new class_c(curr_lineno(), n, p, fl, curr_filename()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class",2, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class ::= CLASS TYPEID LBRACE feature_list RBRACE SEMI 
            {
              class_c RESULT =null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Features fl = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new class_c(curr_lineno(), n, AbstractTable.idtable.addString("Object"), fl, curr_filename()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class",2, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_list ::= class_list class 
            {
              Classes RESULT =null;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		class_c c = (class_c)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = cl.appendElement(c); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class_list",1, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // class_list ::= class 
            {
              Classes RESULT =null;
		class_c c = (class_c)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = (new Classes(curr_lineno())).appendElement(c); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class_list",1, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		programc start_val = (programc)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		RESULT = start_val;
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$CoolParser$parser.done_parsing();
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= class_list 
            {
              programc RESULT =null;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new programc(curr_lineno(), cl); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("program",0, RESULT);
            }
          return CUP$CoolParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

